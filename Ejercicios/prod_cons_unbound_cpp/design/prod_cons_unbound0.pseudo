procedure main(argc, argv[]):
  if argc = 8 then // Arguments of the command line
    shared unit_count := integer(argv[1])  // Number of units
    shared producer_count := integer(argv[2])  // Number of producers
    shared consumer_count := integer(argv[3])  // Number of consumers
    shared producer_min_delay := integer(argv[4])  // Min of time that the producer waits
    shared producer_max_delay := integer(argv[5])  // Max of time that the producer waits
    shared consumer_min_delay := integer(argv[6])  // Min of time that the consumer waits
    shared consumer_max_delay := integer(argv[7])  // Max of time that the consumer waits

    shared queue := create_integer_queue()  // Create a shared queue
    shared can_access_queue := create_mutex()  // Create the mutex that says if we can use the queue

    shared next_unit := 0  // The next unit that we produce and later wants to consume
    shared can_access_next_unit := create_mutex()  // Create the mutex that says if we can use the next unit 

    shared consumed_count := 0  // Counter of the amount of products consumed
    shared can_access_consumed_count := create_mutex()  // Create the mutex that says if we can consume

    // A semaphore that is funtion is the communication betweeen
    // the producers and the consumers
    shared can_consume := create_semaphore(0)

    // The number of producers
    declare producers := create_threads(producer_count, produce0)
    // The number of consumers
    declare consumers := create_threads(consumer_count, consume_busywait)

    // Wait for all the threads
    join_threads(producers)
    join_threads(consumers)
  end if
end procedure

// Method of produce vesion 0
procedure produce0:
  declare my_unit := 0
  // In this part locks a part of the code that sees if
  // we have to continue producing and consuming things and
  // thats why we call that is_there_pending_work
  lock(can_access_next_unit)
    declare is_there_pending_work := next_unit < unit_count
    if is_there_pending_work then  // If true
      next_unit := next_unit + 1  // Increase the unit
      my_unit := next_unit
    end if
  unlock(can_access_next_unit)  // Realease the mutex

  while is_there_pending_work do  // Before we see if we continue in this cycle
    delay(random_between(producer_min_delay, producer_max_delay))  // Get random numbers to delay
    lock(can_access_queue)  // Lock to avoid the data race of enqueue in the same place
      enqueue(queue, my_unit)
    unlock(can_access_queue) // Unlock the mutex
    print("Produced ", my_unit)  

    // In this part we see if there is pending work
    // if we have work to do we continue the cycle
    // else, in the next iteration we quit of the cycle
    lock(can_access_next_unit)
      is_there_pending_work := next_unit < unit_count
      if is_there_pending_work then
        next_unit := next_unit + 1
        my_unit := next_unit
      end if
    unlock(can_access_next_unit)
  end while
end procedure

// Method of consume
procedure consume_busywait:
  // This is another form to use the cycle
  // we use an infinite cylce that iterates
  // by a condition, if this condition is
  // activated (in this case is the subroutine
  // is_empty) we break the cycle  
  while true do
    // Lock to avoid the data race
    // of dequeue a NULL place
    lock(can_access_consumed_count)
      if consumed_count < unit_count then  // Continue consuming
        consumed_count := consumed_count + 1
      else
        break while
      end if
    unlock(can_access_consumed_count)
    // Lock the access of the queue to
    // avoid the data race in the line 90
    // and 95 or 92
    lock(can_access_queue)
      if is_empty(queue) then
        lock(can_access_consumed_count)
          consumed_count := consumed_count - 1
        unlock(can_access_consumed_count)
      else
        declare my_unit := dequeue(queue)  // Consumed
        print("\tConsuming ", my_unit)
        delay(random_between(consumer_min_delay, consumer_max_delay))  // Call random
      end if
    unlock(can_access_queue)
  end while
end procedure

//  Method of the randoms
function random_between(min, max):
  return min + rand() % (max - min)
end function
