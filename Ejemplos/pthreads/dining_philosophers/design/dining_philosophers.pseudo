procedure main(argc, argv[]):
  // Memoria compartida, aqui los palillos son
  // semaforos
  shared chopsticks[] := create_semaphores(5, 1)

  for id := 0 to 5 do
    // Aqui se crean los hilos
    create_thread(philosopher, id)
  end for
end procedure

/// Filosofo que se encarga de pensar
// y comer
procedure philosopher(id):
  while true do
    // Metodo para pensar
    think()
    // Toma el palillo de su izquierda
    get_left_chopstick(id)
    // Toma el palillo de la derecha
    // (aqui es donde se encuentra el error)
    // ya que el palillo de la derecha esta ocupado
    get_right_chopstick(id)
    // Metodo para comer
    eat()
    // Metodos para dejar los palillos para que otro
    // filosofo pueda comer
    put_left_chopstick(id)
    put_right_chopstick(id)
  end while
end procedure

// Procedimiento para agarrar el palillo izquierdo
// se utiliza logica modular para que se
// pueda agarrar el palillo
procedure get_left_chopstick(id):
  wait(chopsticks[(id + 1) mod 5])
end procedure

// Procedimiento para agarrar el palillo derecho
// se utiliza logica modular para que se
// pueda agarrar el palillo
procedure get_right_chopstick(id):
  wait(chopsticks[id])
end procedure

// Procedimiento para dejar el palillo izquierdo
// se utiliza logica modular para que se
// pueda agarrar el palillo
procedure put_left_chopstick(id):
  signal(chopsticks[(id + 1) mod 5])
end procedure

// Procedimiento para dejar el palillo derecho
// se utiliza logica modular para que se
// pueda agarrar el palillo
procedure put_right_chopstick(id):
  signal(chopsticks[id])
end procedure
